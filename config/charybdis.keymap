#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define GAME 1
#define NAV  2
#define DIG  3
#define SYS  4
#define MOUSE  5
#define SCROLL 6
#define SNIPE 7

/ {
    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&vtrackball>;

        // scaler: first is multiplier, second one is divider.
        // temp layer: first argument is layer, second is time in ms

        input-processors = <&zip_xy_scaler 1 3>, <&zip_temp_layer MOUSE 1000>;

        snipe {
            layers = <SNIPE>;
            input-processors = <&zip_xy_scaler 1 18>;
        };

        scroll {
            layers = <SCROLL>;

            // scaler: first is multiplier, second one is divider.

            input-processors =
                <&zip_xy_to_scroll_mapper>,
                <&zip_scroll_transform(INPUT_TRANSFORM_XY_SWAP)>,
                <&zip_scroll_scaler 1 72>;
        };
    };


    behaviors {
        hm_right: homerow_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hm_left: homerow_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40>;
        };

        hm_right_layer: homerow_mod_right_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        hm_left_layer: homerow_mod_left_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40>;
        };

        all_quotes: all_quotes {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt GRAVE SQT>, <&kp DOUBLE_QUOTES>;
        };

        space_or_super: space_or_super {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <125>;
            bindings = <&super>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
        };

        opt_backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <7 8 9>;
            timeout-ms = <70>;
            require-prior-idle-ms = <100>;
        };

        shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <15 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        caps_lock {
            bindings = <&caps_word>;
            key-positions = <14 15 16>;
            timeout-ms = <100>;
            require-prior-idle-ms = <150>;
        };
    };

    macros {
        /**
       * Temporarily switches to a layer (`&mo`) while a modifier is held.
       * Analogous to QMK's `LM()`, using a parameterized macro.
       *
       * Params:
       *  1. Layer to switch to
       *  2. Modifier to press while layer is active
       *
       * Example:
       *  `&lm NUM_LAYER LSHIFT`
       */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        press_two_keys: press_two_keys {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;
        };

        super: super {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp LALT>,
                <&macro_press>,
                <&kp LCTL>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_release>,
                <&kp LALT>,
                <&macro_release>,
                <&kp LCTL>;
        };

        more_or_equal: more_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MORE_OR_EQUAL";
        };

        less_or_equal: less_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_OR_EQUAL";
        };

        fun_arrow_right: fun_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "FUN_ARROW_RIGHT";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            label = "Base";
            bindings = <
&lt SYS ESC   &kp Q             &kp W  &kp E             &kp R      &kp T    &kp Y  &kp U    &kp I      &kp O       &kp P                      &kp BACKSPACE
&kp TAB       &mt LEFT_SHIFT A  &kp S  &kp D             &kp F      &kp G    &kp H  &kp J    &kp K      &kp L       &mt RIGHT_SHIFT SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_GUI  &kp Z             &kp X  &kp C             &kp V      &kp B    &kp N  &kp M    &kp COMMA  &kp PERIOD  &kp SLASH                  &kp RIGHT_CONTROL
                                       &kp LEFT_CONTROL  &kp SPACE  &mo 2    &mo 3  &kp RET
            >;
        };

        GAME {
            label = "Game";
            bindings = <
&lt BASE ESC  &kp Q  &kp W  &kp E             &kp R      &kp T      &kp Y        &kp U    &kp I      &kp O    &kp P          &to BASE
&kp TAB       &kp A  &kp S  &kp D             &kp F      &kp G      &kp H        &kp J    &kp K      &kp L    &kp SEMICOLON  &trans
&kp LSHFT     &kp Z  &kp X  &kp C             &kp V      &kp B      &kp N        &kp M    &kp COMMA  &kp DOT  &kp SLASH      &trans
                            &sk LEFT_COMMAND  &kp SPACE  &mo DIG    &lt SYS ESC  &kp RET
            >;
        };

        Symbols {
            label = "Navigation";
            bindings = <
&trans  &kp EXCL  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET          &kp AMPERSAND   &kp ASTERISK     &kp LEFT_PARENTHESIS  &kt RIGHT_PARENTHESIS  &kp EQUAL
&trans  &trans    &trans  &trans    &trans      &trans         &kp LA(BACKSLASH)  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans
&trans  &trans    &trans  &trans    &trans      &trans         &none              &kp LA(LEFT)    &none            &kp LA(RIGHT)         &kt PAGE_DOWN          &trans
                          &trans    &kp SPACE   &trans         &trans             &trans
            >;
        };

        digits {
            label = "Digits";
            bindings = <
&mo 4   &kp NUMBER_1      &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &kp NUMBER_6    &kp N7    &kp N8        &kp N9     &kp N0           &trans
&trans  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp DEL       &trans        &trans    &kp LEFT_ARROW  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &kp KP_MULTIPLY  &kp MINUS
&trans  &kp F1            &kp F2        &kp F3        &kp F4        &kp F5    &kp F6          &kp F7    &trans        &trans     &trans           &kp SLASH
                                        &trans        &trans        &trans    &trans          &kp N0
            >;
        };

        system {
            label = "SYSTEM";
            bindings = <
&trans      &kp F1          &kp F2  &kp F3        &kp F4        &kp F5          &kp F6        &kp F7        &kp F8      &kp F9      &kp F10  &trans
&trans      &trans          &trans  &trans        &out OUT_USB  &out OUT_BLE    &kp C_MUTE    &kp C_PP      &trans      &trans      &trans   &trans
&bt BT_CLR  &bt BT_CLR_ALL  &trans  &out OUT_TOG  &bt BT_PRV    &bt BT_NXT      &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_NEXT  &trans   &studio_unlock
                                    &trans        &trans        &trans          &trans        &trans
            >;
        };

        AUTO-MOUSE {
            label = "Mouse";
            bindings = <
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;
        };

        SCROLL {
            label = "Scroll";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };

        SNIPE {
            label = "Snipe";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
